User Authentication: DONE

How will the app start when a user logs in?
    1: user authentication succeeds
        Return user account data to main.cpp
    2: data will be fetched from the data base
        Run SQL query in main
    3: data is loaded into user class
        useraccount::LoadData(user data);
        UserAccount will be stored as a global variable within main
    4: app threads are started 
        This will be a class and will start up the app.
        user data pointers will be passed to threads. 
        new window is launched 

What threads will be strted? What will each thread do?
    1: Search bar thread: This thread will take user input and search throguh a list of user passwords to find matches. 
    either exact matches or partial. 

        filter passwords; pass list to scrollbar object
        create clone of list and pass it to scroll bar 

    2: Operations thread: This thread will be responsible for mutating user list of passwords. 
        Add
        Remove
        Modify
        view password
        
        condition variable to sleep thread until user event happens.
        event will be processed

        ** needs mutable ref to user class
    3: Main Display thread: this thread will be responsible to handeling user input 
        search bar input
        scrolling throguh list of passwords
        clicks
        etc. 
        when user selects an item the operations thread is called 
        user clicks will launch operation dialog box: add, remove, moifty, view/decrypt password

How will data be passed between each class?
    I will need to research how to pass object between classes.
    I am assuming a pointer to the data and a Mutex

How will data be loaded from the Database?
    SQL query: select all passwords that have a matching USERID

What class will hold the user data? The user account?
    An account class with functions for modifying data    

How will the app quit? 

How do I ensure that all user data is stored in the data base?
    Maybe a store data thread. This thread will update the database when a timer goes off. 